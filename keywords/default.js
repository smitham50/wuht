module.exports = () => {
    console.log("");
    console.log("---------------");
    console.log("  switch  ");
    console.log("---------------\n");

    console.log("The switch statement evaluates an expression, matching the expression's value to a case clause, and executes statements associated with that case, as well as");
    console.log("statements in cases that follow the matching case.\n");

    console.log("Demo:\n");

    console.log("  const expr = 'Papayas';");
    console.log("  switch (expr) {");
    console.log("    case 'Oranges':");
    console.log("      console.log('Oranges are $0.59 a pound.');");
    console.log("      break;");
    console.log("    case 'Mangoes':");
    console.log("    case 'Papayas':");
    console.log("      console.log('Mangoes and papayas are $2.79 a pound.');");
    console.log("      // expected output: 'Mangoes and papayas are $2.79 a pound.'");
    console.log("      break;");
    console.log("    default:");
    console.log("      console.log(`Sorry, we are out of ${expr}.`);");
    console.log("  }\n");

    console.log("---------------");
    console.log("  Syntax  ");
    console.log("---------------\n");

    console.log("  switch (expression) {");
    console.log("    case value1:");
    console.log("      //Statements executed when the");
    console.log("      //result of expression matches value1");
    console.log("      [break;]");
    console.log("    case value2:");
    console.log("      //Statements executed when the");
    console.log("      //result of expression matches value2");
    console.log("      [break;]");
    console.log("    ...");
    console.log("    case valueN:");
    console.log("      //Statements executed when the");
    console.log("      //result of expression matches valueN");
    console.log("      [break;]");
    console.log("    [default:");
    console.log("      //Statements executed when none of");
    console.log("      //the values match the value of the expression");
    console.log("      [break;]]");
    console.log("  }\n");
    console.log("expression:");
    console.log("  An expression whose result is matched against each case clause.\n");
    console.log("case valueN (Optional):");
    console.log("  A case clause used to match against expression. If the expression matches the specified valueN, the statements inside the case clause are executed until either");
    console.log("  the end of the switch statement or a break.\n");
    console.log("default (Optional):");
    console.log("A default clause; if provided, this clause is executed if the value of expression doesn't match any of the case clauses.\n");

    console.log("---------------");
    console.log("  Description  ");
    console.log("---------------\n");

    console.log("A switch statement first evaluates its expression. It then looks for the first case clause whose expression evaluates to the same value as the result of the input");
    console.log("expression (using the strict comparison, ===) and transfers control to that clause, executing the associated statements. (If multiple cases match the provided value,");
    console.log("the first case that matches is selected, even if the cases are not equal to each other.)\n");
    console.log("If no matching case clause is found, the program looks for the optional default clause, and if found, transfers control to that clause, executing the associated");
    console.log("statements. If no default clause is found, the program continues execution at the statement following the end of switch. By convention, the default clause is the last");
    console.log("clause, but it does not need to be so.\n");
    console.log("The optional break statement associated with each case label ensures that the program breaks out of switch once the matched statement is executed and continues execution");
    console.log("at the statement following switch. If break is omitted, the program continues execution at the next statement in the switch statement. The break statement is not required");
    console.log("if a return statement precedes it.\n");

    console.log("---------------");
    console.log("  Examples  ");
    console.log("---------------\n");

    console.log("- Using Switch -\n");

    console.log("In the following example, if expr evaluates to Bananas, the program matches the value with case case 'Bananas' and executes the associated statement. When break is encountered,");
    console.log("the program breaks out of switch and executes the statement following switch. If break were omitted, the statement for the case 'Cherries' would also be executed.\n");
    console.log("  switch (expr) {");
    console.log("    case 'Oranges':");
    console.log("      console.log('Oranges are $0.59 a pound.');");
    console.log("      break;");
    console.log("    case 'Apples':");
    console.log("      console.log('Apples are $0.32 a pound.');");
    console.log("      break;");
    console.log("    case 'Bananas':");
    console.log("      console.log('Bananas are $0.48 a pound.');");
    console.log("      break;");
    console.log("    case 'Cherries':");
    console.log("      console.log('Cherries are $3.00 a pound.');");
    console.log("      break;");
    console.log("    case 'Mangoes':");
    console.log("    case 'Papayas':");
    console.log("      console.log('Mangoes and papayas are $2.79 a pound.');");
    console.log("      break;");
    console.log("    default:");
    console.log("      console.log('Sorry, we are out of ' + expr + '.');");
    console.log("  }");
    console.log("  console.log('Is there anything else you\'d like?');\n");

    console.log("- What happens if I forgot a break? -\n");

    console.log("If you forget a break then the script will run from the case where the criterion is met and will run the cases after that regardless if a criterion was met.\n");
    console.log("See example here:\n");
    console.log("  var foo = 0;");
    console.log("  switch (foo) {");
    console.log("    case -1:");
    console.log("      console.log('negative 1');");
    console.log("      break;");
    console.log("    case 0: // foo is 0 so criteria met here so this block will run");
    console.log("      console.log(0);");
    console.log("      // NOTE: the forgotten break would have been here");
    console.log("    case 1: // no break statement in 'case 0:' so this case will run as well");
    console.log("      console.log(1);");
    console.log("      break; // it encounters this break so will not continue into 'case 2:'");
    console.log("    case 2:");
    console.log("      console.log(2);");
    console.log("      break;");
    console.log("    default:");
    console.log("      console.log('default');");
    console.log("  }\n");

    console.log("- Can I put a default between cases? -\n");

    console.log("Yes, you can! JavaScript will drop you back to the default if it can't find a match:\n");
    console.log("  var foo = 5;");
    console.log("  switch (foo) {");
    console.log("    case 2:");
    console.log("      console.log(2);");
    console.log("      break; // it encounters this break so will not continue into 'default:'");
    console.log("    default:");
    console.log("      console.log('default')");
    console.log("      // fall-through");
    console.log("    case 1:");
    console.log("      console.log('1');");
    console.log("  }\n");
    console.log("It also works when you put default before all other cases.\n");

    console.log("- Methods for multi-criteria case -\n");

    console.log("This technique is also commonly called fall-through.\n");
    console.log("  Multi-case: single operation\n");
    console.log("    This method takes advantage of the fact that if there is no break below a case clause it will continue to execute the next case clause regardless if the case meets");
    console.log("    the criteria. (See the section 'What happens if I forgot a break?')\n");
    console.log("    This is an example of a single operation sequential case statement, where four different values perform exactly the same.\n");
    console.log("      var Animal = 'Giraffe';");
    console.log("      switch (Animal) {");
    console.log("        case 'Cow':");
    console.log("        case 'Giraffe':");
    console.log("        case 'Dog':");
    console.log("        case 'Pig':");
    console.log("          console.log('This animal is not extinct.');");
    console.log("          break;");
    console.log("        case 'Dinosaur':");
    console.log("        default:");
    console.log("          console.log('This animal is extinct.');");
    console.log("      }\n");
    console.log("  Multi-case: chained operations\n");
    console.log("    This is an example of a multiple-operation sequential case clause, where, depending on the provided integer, you can receive different output. This shows you that it");
    console.log("    will traverse in the order that you put the case clauses, and it does not have to be numerically sequential. In JavaScript, you can even mix in definitions of strings");
    console.log("    into these case statements as well.\n");
    console.log("      var foo = 1;");
    console.log("      var output = 'Output: ';");
    console.log("      switch (foo) {");
    console.log("        case 0:");
    console.log("          output += 'So ';");
    console.log("        case 1:");
    console.log("          output += 'What ';");
    console.log("          output += 'Is ';");
    console.log("        case 2:");
    console.log("          output += 'Your ';");
    console.log("        case 3:");
    console.log("          output += 'Name';");
    console.log("        case 4:");
    console.log("          output += '?';");
    console.log("          console.log(output);");
    console.log("          break;");
    console.log("        case 5:");
    console.log("          output += '!';");
    console.log("          console.log(output);");
    console.log("          break;");
    console.log("        default:");
    console.log("          console.log('Please pick a number from 0 to 5!');");
    console.log("      }\n");
    console.log("    The output from this example:\n");
    console.log("    Value                                  |   Log text");
    console.log("    -----------------------------------------------------------------------------");
    console.log("    foo is NaN or not 1, 2, 3, 4, 5, or 0  |   Please pick a number from 0 to 5!");
    console.log("    -----------------------------------------------------------------------------");
    console.log("    0                                      |   Output: So What Is Your Name?");
    console.log("    -----------------------------------------------------------------------------");
    console.log("    1                                      |   Output: What Is Your Name?");
    console.log("    -----------------------------------------------------------------------------");
    console.log("    2                                      |   Output: Your Name?");
    console.log("    -----------------------------------------------------------------------------");
    console.log("    3                                      |   Output: Name?");
    console.log("    -----------------------------------------------------------------------------");
    console.log("    4                                      |   Output: ?");
    console.log("    -----------------------------------------------------------------------------");
    console.log("    5                                      |   Output: !");
    console.log("    -----------------------------------------------------------------------------\n");

    console.log("- Block-scope variables within switch statements -\n");

    console.log("With ECMAScript 2015 (ES6) support made available in most modern browsers, there will be cases where you would want to use let and const statements to declare");
    console.log("block-scoped variables.\n");

    console.log("Take a look at this example:\n");
    console.log("  const action = 'say_hello';");
    console.log("  switch (action) {");
    console.log("    case 'say_hello':");
    console.log("      let message = 'hello';");
    console.log("      console.log(message);");
    console.log("      break;");
    console.log("    case 'say_hi':");
    console.log("      let message = 'hi';");
    console.log("      console.log(message);");
    console.log("      break;");
    console.log("    default:");
    console.log("      console.log('Empty action received.');");
    console.log("      break;");
    console.log("  }\n");
    console.log("This example will output the error Uncaught SyntaxError: Identifier 'message' has already been declared which you were not probably expecting.\n");
    console.log("This is because the first let message = 'hello'; conflicts with second let statement let message = 'hi'; even they're within their own separate case clauses case");
    console.log("'say_hello': and case 'say_hi':. Ultimately, this is due to both let statements being interpreted as duplicate declarations of the same variable name within the");
    console.log("same block scope.\n");
    console.log("We can easily fix this by wrapping our case clauses with brackets:\n");
    console.log("  const action = 'say_hello';");
    console.log("  switch (action) {");
    console.log("    case 'say_hello': { // added brackets");
    console.log("      let message = 'hello';");
    console.log("      console.log(message);");
    console.log("      break;");
    console.log("    } // added brackets");
    console.log("    case 'say_hi': { // added brackets");
    console.log("      let message = 'hi';");
    console.log("      console.log(message);");
    console.log("      break;");
    console.log("    } // added brackets");
    console.log("    default: { // added brackets");
    console.log("      console.log('Empty action received.');");
    console.log("      break;");
    console.log("    } // added brackets");
    console.log("  }\n");
    console.log("This code will now output hello in the console as it should, without any errors at all.\n");
}